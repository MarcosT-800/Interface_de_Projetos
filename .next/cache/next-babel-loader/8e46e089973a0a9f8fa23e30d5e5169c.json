{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/workspace/Interface_de_Projetos/src/pages/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport dayjs from 'dayjs';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\nexport default function TimeValidationTimePicker() {\n  _s();\n\n  var _this = this;\n\n  var _React$useState = React.useState(dayjs('2020-01-01 12:00')),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  return __jsx(LocalizationProvider, {\n    dateAdapter: AdapterDayjs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(Stack, {\n    spacing: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, __jsx(TimePicker, {\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 36\n        }\n      }));\n    },\n    value: value,\n    label: \"min/max time\",\n    onChange: function onChange(newValue) {\n      setValue(newValue);\n    },\n    minTime: dayjs('2018-01-01T08:00'),\n    maxTime: dayjs('2018-01-01T18:45'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }), __jsx(TimePicker, {\n    renderInput: function renderInput(params) {\n      return __jsx(TextField, _extends({}, params, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 36\n        }\n      }));\n    },\n    label: \"Disable odd hours\",\n    value: value,\n    onChange: function onChange(newValue) {\n      setValue(newValue);\n    },\n    shouldDisableTime: function shouldDisableTime(timeValue, clockType) {\n      if (clockType === 'hours' && timeValue % 2) {\n        return true;\n      }\n\n      return false;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  })));\n}\n\n_s(TimeValidationTimePicker, \"XJKwVgY8ZxP2SQM9kzLJBqVAXIo=\");\n\n_c = TimeValidationTimePicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeValidationTimePicker\");","map":{"version":3,"sources":["/workspace/Interface_de_Projetos/src/pages/index.tsx"],"names":["React","dayjs","TextField","Stack","AdapterDayjs","LocalizationProvider","TimePicker","TimeValidationTimePicker","useState","value","setValue","params","newValue","timeValue","clockType"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAA6B,OAA7B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAASC,YAAT,QAA6B,kCAA7B;AACA,SAASC,oBAAT,QAAqC,0CAArC;AACA,SAASC,UAAT,QAA2B,gCAA3B;AAEA,eAAe,SAASC,wBAAT,GAAoC;AAAA;;AAAA;;AAAA,wBACvBP,KAAK,CAACQ,QAAN,CAA6BP,KAAK,CAAC,kBAAD,CAAlC,CADuB;AAAA;AAAA,MAC1CQ,KAD0C;AAAA,MACnCC,QADmC;;AAGjD,SACE,MAAC,oBAAD;AAAsB,IAAA,WAAW,EAAEN,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAO,IAAA,OAAO,EAAE,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,WAAW,EAAE,qBAACO,MAAD;AAAA,aAAY,MAAC,SAAD,eAAeA,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;AAAA,KADf;AAEE,IAAA,KAAK,EAAEF,KAFT;AAGE,IAAA,KAAK,EAAC,cAHR;AAIE,IAAA,QAAQ,EAAE,kBAACG,QAAD,EAAc;AACtBF,MAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,KANH;AAOE,IAAA,OAAO,EAAEX,KAAK,CAAC,kBAAD,CAPhB;AAQE,IAAA,OAAO,EAAEA,KAAK,CAAC,kBAAD,CARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAWE,MAAC,UAAD;AACE,IAAA,WAAW,EAAE,qBAACU,MAAD;AAAA,aAAY,MAAC,SAAD,eAAeA,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAZ;AAAA,KADf;AAEE,IAAA,KAAK,EAAC,mBAFR;AAGE,IAAA,KAAK,EAAEF,KAHT;AAIE,IAAA,QAAQ,EAAE,kBAACG,QAAD,EAAc;AACtBF,MAAAA,QAAQ,CAACE,QAAD,CAAR;AACD,KANH;AAOE,IAAA,iBAAiB,EAAE,2BAACC,SAAD,EAAYC,SAAZ,EAA0B;AAC3C,UAAIA,SAAS,KAAK,OAAd,IAAyBD,SAAS,GAAG,CAAzC,EAA4C;AAC1C,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CADF,CADF;AA+BD;;GAlCuBN,wB;;KAAAA,wB","sourcesContent":["import * as React from 'react';\nimport dayjs, { Dayjs } from 'dayjs';\nimport TextField from '@mui/material/TextField';\nimport Stack from '@mui/material/Stack';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { TimePicker } from '@mui/x-date-pickers/TimePicker';\n\nexport default function TimeValidationTimePicker() {\n  const [value, setValue] = React.useState<Dayjs | null>(dayjs('2020-01-01 12:00'));\n\n  return (\n    <LocalizationProvider dateAdapter={AdapterDayjs}>\n      <Stack spacing={3}>\n        <TimePicker\n          renderInput={(params) => <TextField {...params} />}\n          value={value}\n          label=\"min/max time\"\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          minTime={dayjs('2018-01-01T08:00')}\n          maxTime={dayjs('2018-01-01T18:45')}\n        />\n        <TimePicker\n          renderInput={(params) => <TextField {...params} />}\n          label=\"Disable odd hours\"\n          value={value}\n          onChange={(newValue) => {\n            setValue(newValue);\n          }}\n          shouldDisableTime={(timeValue, clockType) => {\n            if (clockType === 'hours' && timeValue % 2) {\n              return true;\n            }\n\n            return false;\n          }}\n        />\n      </Stack>\n    </LocalizationProvider>\n  );\n}"]},"metadata":{},"sourceType":"module"}